"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.playGame = exports.gameOfGCD = exports.gameOfCalc = exports.gameOfEven = exports.congratulate = exports.questionNameAndSayHello = exports.sayWelcome = void 0;

var _readlineSync = _interopRequireDefault(require("readline-sync"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const sayWelcome = () => {
  console.log('\nWelcome to the Brain Games!');
};

exports.sayWelcome = sayWelcome;

const questionNameAndSayHello = () => {
  const name = _readlineSync.default.question('\nMay I have your name? ');

  console.log(`\nHello, ${name}`);
  return name;
};

exports.questionNameAndSayHello = questionNameAndSayHello;

const congratulate = name => console.log(`\nCongratulations, ${name}!`); // every game returns [string, function]


exports.congratulate = congratulate;

const gameOfEven = (maxNum = 50) => {
  const instruction = 'Anwser "yes" if number even otherwise answer "no"';

  const generator = () => {
    const generatedNumber = Math.floor(Math.random() * maxNum);
    const isEven = generatedNumber % 2 === 0;
    const result = isEven ? 'yes' : 'no';
    return [generatedNumber, result];
  };

  return [instruction, generator];
};

exports.gameOfEven = gameOfEven;

const gameOfCalc = (maxNum = 50, maxNum2 = maxNum / 5) => {
  const instruction = 'What is result of the expression?';

  const generator = () => {
    const genNum1 = Math.floor(Math.random() * maxNum);
    const genNum2 = Math.floor(Math.random() * maxNum2);
    const expSymbols = [{
      str: '+',
      f: (a, b) => a + b
    }, {
      str: '-',
      f: (a, b) => a - b
    }, {
      str: '*',
      f: (a, b) => a * b
    }];
    const transSymbol = expSymbols[Math.floor(Math.random() * 3)];
    const genQuestion = `${genNum1} ${transSymbol.str} ${genNum2}`;
    const result = String(transSymbol.f(genNum1, genNum2));
    return [genQuestion, result];
  };

  return [instruction, generator];
};

exports.gameOfCalc = gameOfCalc;

const gameOfGCD = (maxNum = 50) => {
  const instruction = 'Find the greatest common divisor of given numbers.';

  const generator = () => {
    const genNum1 = Math.floor(Math.random() * maxNum);
    const genNum2 = Math.floor(Math.random() * maxNum);

    const nod = (a, b) => b > 0 ? nod(b, a % b) : a;

    const genNOD = String(nod(genNum1, genNum2));
    const genQuestion = `${genNum1} ${genNum2}`;
    return [genQuestion, genNOD];
  };

  return [instruction, generator];
};

exports.gameOfGCD = gameOfGCD;

const playGame = (game, numCorrectGames = 3, maxNum = 50) => {
  sayWelcome();
  const name = questionNameAndSayHello();
  const [instruction, generator] = game(maxNum);
  console.log(`\n${instruction}`);

  for (let i = 0; i < numCorrectGames;) {
    const [question, answer] = generator();

    const userAnswer = _readlineSync.default.question(`\nQuestion: ${question}\nYour answer: `);

    if (userAnswer === answer) {
      console.log('Correct!');
      i += 1;
    } else console.log(`'${userAnswer}' is wrong answer ;(. Correct answer was '${answer}'`);
  }

  congratulate(name);
};

exports.playGame = playGame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,