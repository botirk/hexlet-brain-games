"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = (maxNum = 50, progCount = 10, minStep = 2, maxStep = minStep + 9) => () => {
  // you cant guess progression with less than 3 numbers, so fix it
  const alteredProgCount = progCount < 3 ? 3 : progCount;
  const instruction = 'What number is missing in the progression?';

  const generator = () => {
    // step for array of numbers
    const step = minStep + Math.floor(Math.random() * maxStep); // iterative process - generates array

    const genIter = (result, lastNum, i) => {
      if (i === 0) return result;
      const newLastNum = lastNum + step;
      result.push(newLastNum);
      return genIter(result, newLastNum, i - 1);
    };

    const genProgression = genIter([], Math.floor(Math.random() * maxNum), alteredProgCount); // generated missing number index

    const genMissingNumIndex = Math.floor(Math.random() * alteredProgCount);
    const answer = String(genProgression[genMissingNumIndex]); // replace missing index with two dots

    genProgression[genMissingNumIndex] = '..';
    const question = genProgression.join(' ');
    return [question, answer];
  };

  return [instruction, generator];
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nYW1lcy9wcm9ncmVzc2lvbi5qcyJdLCJuYW1lcyI6WyJtYXhOdW0iLCJwcm9nQ291bnQiLCJtaW5TdGVwIiwibWF4U3RlcCIsImFsdGVyZWRQcm9nQ291bnQiLCJpbnN0cnVjdGlvbiIsImdlbmVyYXRvciIsInN0ZXAiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJnZW5JdGVyIiwicmVzdWx0IiwibGFzdE51bSIsImkiLCJuZXdMYXN0TnVtIiwicHVzaCIsImdlblByb2dyZXNzaW9uIiwiZ2VuTWlzc2luZ051bUluZGV4IiwiYW5zd2VyIiwiU3RyaW5nIiwicXVlc3Rpb24iLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O2VBQWUsQ0FBQ0EsTUFBTSxHQUFHLEVBQVYsRUFBY0MsU0FBUyxHQUFHLEVBQTFCLEVBQThCQyxPQUFPLEdBQUcsQ0FBeEMsRUFDYkMsT0FBTyxHQUFHRCxPQUFPLEdBQUcsQ0FEUCxLQUNhLE1BQU07QUFDaEM7QUFDQSxRQUFNRSxnQkFBZ0IsR0FBR0gsU0FBUyxHQUFHLENBQVosR0FBZ0IsQ0FBaEIsR0FBb0JBLFNBQTdDO0FBQ0EsUUFBTUksV0FBVyxHQUFHLDRDQUFwQjs7QUFDQSxRQUFNQyxTQUFTLEdBQUcsTUFBTTtBQUN0QjtBQUNBLFVBQU1DLElBQUksR0FBR0wsT0FBTyxHQUFHTSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCUCxPQUEzQixDQUF2QixDQUZzQixDQUd0Qjs7QUFDQSxVQUFNUSxPQUFPLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxPQUFULEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0QyxVQUFJQSxDQUFDLEtBQUssQ0FBVixFQUFhLE9BQU9GLE1BQVA7QUFDYixZQUFNRyxVQUFVLEdBQUdGLE9BQU8sR0FBR04sSUFBN0I7QUFDQUssTUFBQUEsTUFBTSxDQUFDSSxJQUFQLENBQVlELFVBQVo7QUFDQSxhQUFPSixPQUFPLENBQUNDLE1BQUQsRUFBU0csVUFBVCxFQUFxQkQsQ0FBQyxHQUFHLENBQXpCLENBQWQ7QUFDRCxLQUxEOztBQU1BLFVBQU1HLGNBQWMsR0FBR04sT0FBTyxDQUFDLEVBQUQsRUFBS0gsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlYsTUFBM0IsQ0FBTCxFQUF5Q0ksZ0JBQXpDLENBQTlCLENBVnNCLENBV3RCOztBQUNBLFVBQU1jLGtCQUFrQixHQUFHVixJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCTixnQkFBM0IsQ0FBM0I7QUFDQSxVQUFNZSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0gsY0FBYyxDQUFDQyxrQkFBRCxDQUFmLENBQXJCLENBYnNCLENBY3RCOztBQUNBRCxJQUFBQSxjQUFjLENBQUNDLGtCQUFELENBQWQsR0FBcUMsSUFBckM7QUFDQSxVQUFNRyxRQUFRLEdBQUdKLGNBQWMsQ0FBQ0ssSUFBZixDQUFvQixHQUFwQixDQUFqQjtBQUNBLFdBQU8sQ0FBQ0QsUUFBRCxFQUFXRixNQUFYLENBQVA7QUFDRCxHQWxCRDs7QUFtQkEsU0FBTyxDQUFDZCxXQUFELEVBQWNDLFNBQWQsQ0FBUDtBQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAobWF4TnVtID0gNTAsIHByb2dDb3VudCA9IDEwLCBtaW5TdGVwID0gMixcbiAgbWF4U3RlcCA9IG1pblN0ZXAgKyA5KSA9PiAoKSA9PiB7XG4gIC8vIHlvdSBjYW50IGd1ZXNzIHByb2dyZXNzaW9uIHdpdGggbGVzcyB0aGFuIDMgbnVtYmVycywgc28gZml4IGl0XG4gIGNvbnN0IGFsdGVyZWRQcm9nQ291bnQgPSBwcm9nQ291bnQgPCAzID8gMyA6IHByb2dDb3VudDtcbiAgY29uc3QgaW5zdHJ1Y3Rpb24gPSAnV2hhdCBudW1iZXIgaXMgbWlzc2luZyBpbiB0aGUgcHJvZ3Jlc3Npb24/JztcbiAgY29uc3QgZ2VuZXJhdG9yID0gKCkgPT4ge1xuICAgIC8vIHN0ZXAgZm9yIGFycmF5IG9mIG51bWJlcnNcbiAgICBjb25zdCBzdGVwID0gbWluU3RlcCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heFN0ZXApO1xuICAgIC8vIGl0ZXJhdGl2ZSBwcm9jZXNzIC0gZ2VuZXJhdGVzIGFycmF5XG4gICAgY29uc3QgZ2VuSXRlciA9IChyZXN1bHQsIGxhc3ROdW0sIGkpID0+IHtcbiAgICAgIGlmIChpID09PSAwKSByZXR1cm4gcmVzdWx0O1xuICAgICAgY29uc3QgbmV3TGFzdE51bSA9IGxhc3ROdW0gKyBzdGVwO1xuICAgICAgcmVzdWx0LnB1c2gobmV3TGFzdE51bSk7XG4gICAgICByZXR1cm4gZ2VuSXRlcihyZXN1bHQsIG5ld0xhc3ROdW0sIGkgLSAxKTtcbiAgICB9O1xuICAgIGNvbnN0IGdlblByb2dyZXNzaW9uID0gZ2VuSXRlcihbXSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4TnVtKSwgYWx0ZXJlZFByb2dDb3VudCk7XG4gICAgLy8gZ2VuZXJhdGVkIG1pc3NpbmcgbnVtYmVyIGluZGV4XG4gICAgY29uc3QgZ2VuTWlzc2luZ051bUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWx0ZXJlZFByb2dDb3VudCk7XG4gICAgY29uc3QgYW5zd2VyID0gU3RyaW5nKGdlblByb2dyZXNzaW9uW2dlbk1pc3NpbmdOdW1JbmRleF0pO1xuICAgIC8vIHJlcGxhY2UgbWlzc2luZyBpbmRleCB3aXRoIHR3byBkb3RzXG4gICAgZ2VuUHJvZ3Jlc3Npb25bZ2VuTWlzc2luZ051bUluZGV4XSA9ICcuLic7XG4gICAgY29uc3QgcXVlc3Rpb24gPSBnZW5Qcm9ncmVzc2lvbi5qb2luKCcgJyk7XG4gICAgcmV0dXJuIFtxdWVzdGlvbiwgYW5zd2VyXTtcbiAgfTtcbiAgcmV0dXJuIFtpbnN0cnVjdGlvbiwgZ2VuZXJhdG9yXTtcbn07Il19